name: Publish package to the Maven Central Repository

on:
  release:
    types: [ created ]
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean install

    - name: Run Tests
      run: mvn test

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Get release version
      id: get_version
      run: |
        echo "RELEASE_VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')" >> $GITHUB_ENV

    - name: Configure Maven settings
      run: |
        mkdir -p ~/.m2
        echo "<settings>
          <servers>
            <server>
              <id>ossrh</id>
              <username>${{ secrets.SONATYPE_USER }}</username>
              <password>${{ secrets.SONATYPE_PASS }}</password>
            </server>
          </servers>
        </settings>" > ~/.m2/settings.xml

    - name: Import GPG key
      run: |
        echo "${{ secrets.EXISTING_GPG_KEY }}" | gpg --import

    - name: Sign and package JAR
      run: mvn verify -Dgpg.executable=gpg -Dgpg.passphrase=${{ secrets.EXISTING_GPG_PASSPHRASE }} -Dgpg.skip=false

    - name: Deploy to Maven Central
      run: mvn --batch-mode deploy -P release -Drelease-version=${{ env.RELEASE_VERSION }} -DskipTests
      env:
        GPG_KEY_ID: ${{ secrets.EXISTING_GPG_KEY_ID }}
        GPG_KEY_PASSPHRASE: ${{ secrets.EXISTING_GPG_PASSPHRASE }}

    - name: Clean up Maven settings
      run: rm -rf ~/.m2/settings.xml

  release:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
    - name: Create a Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.event.release.tag_name }}
        release_name: 'Release ${{ github.event.release.tag_name }}'
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Upload JAR to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/*.jar
        asset_name: spring-rest-framework-${{ env.RELEASE_VERSION }}.jar
        asset_content_type: application/java-archive
